// Generated by CoffeeScript 1.7.1
(function() {
  var Globe;

  Globe = (function() {
    var config, currentLevel, currentRotation, groupPaths, groupPathsSelection, loadedDataCallback, m0, manualRotationActivated, mouseDown, mouseMove, mouseUp, o0, path, projection, redrawPathsOnRotationOrScale, rotate, svg;

    config = {
      svgBlockSelector: ".globe-container",
      svgHeight: 600,
      svgWidth: 600,
      colorRange: ["#ff5a00", "#47ff00"],
      globeDefaultRotation: [0, -10, 0],
      urlWorldTopojson: "data/world_110m_admin_countries-capitals_simplified.json",
      urlLifeExpectancy: "data/life_expectancy_at_birth.json"
    };

    svg = projection = path = groupPaths = null;

    m0 = o0 = null;

    currentRotation = config.globeDefaultRotation;

    currentLevel = 1;

    manualRotationActivated = false;

    groupPathsSelection = {};

    function Globe(overridingConfig) {
      if (overridingConfig == null) {
        overridingConfig = {};
      }
      config = _.defaults(overridingConfig, config);
      config.initialScale = config.svgHeight * 0.5;
    }

    Globe.prototype.initSVG = function() {
      var graticule;
      svg = d3.select(config.svgBlockSelector).insert("svg", ":first-child").attr("width", config.svgWidth).attr("height", config.svgHeight).on("mousedown", mouseDown).on("mousemove", mouseMove).on("mouseup", mouseUp);
      projection = d3.geo.orthographic().scale(config.initialScale).translate([config.svgWidth / 2, config.svgHeight / 2]).rotate(config.globeDefaultRotation).clipAngle(90);
      path = d3.geo.path().projection(projection);
      svg.append("path").datum({
        type: "Sphere"
      }).attr("class", "sphere").attr("d", path);
      groupPaths = svg.append("g").attr("class", "all-path");
      graticule = d3.geo.graticule();
      return groupPaths.append("path").datum(graticule).attr("class", "graticule").attr("d", path);
    };

    Globe.prototype.start = function() {
      return queue().defer(d3.json, config.urlWorldTopojson).defer(d3.json, config.urlLifeExpectancy).await(loadedDataCallback);
    };

    loadedDataCallback = function(error, worldTopo, lifeExpectancy) {
      var colorScale, countries, lifeExpectancyDomain;
      countries = topojson.feature(worldTopo, worldTopo.objects.countries).features;
      lifeExpectancyDomain = d3.extent(_.pluck(lifeExpectancy, "age"));
      $(".legend .min").text(lifeExpectancyDomain[0]);
      $(".legend .max").text(lifeExpectancyDomain[1]);
      colorScale = d3.scale.linear().domain(lifeExpectancyDomain).interpolate(d3.interpolateRgb).range(config.colorRange);
      return groupPaths.selectAll(".country").data(countries).enter().append("path").attr("d", path).attr("class", "country").attr("fill", function(d) {
        if (_.has(lifeExpectancy, d.id)) {
          return colorScale(lifeExpectancy[d.id].age);
        } else {
          return "#777";
        }
      });
    };

    mouseDown = function() {
      var animationRequest;
      m0 = [d3.event.pageX, d3.event.pageY];
      o0 = projection.rotate();
      manualRotationActivated = true;
      animationRequest = requestAnimationFrame(rotate);
      return d3.event.preventDefault();
    };

    mouseUp = function() {
      manualRotationActivated = false;
      if (m0) {
        return m0 = null;
      }
    };

    mouseMove = function() {
      var m1, o1;
      if (m0 && currentLevel === 1) {
        m1 = [d3.event.pageX, d3.event.pageY];
        o1 = [o0[0] + (m1[0] - m0[0]) / 6, o0[1] + (m0[1] - m1[1]) / 6];
        o1[1] = (o1[1] > 30 ? 30 : (o1[1] < -30 ? -30 : o1[1]));
        return currentRotation[0] = o1[0];
      }
    };

    rotate = function() {
      var animationRequest;
      if (manualRotationActivated) {
        projection.rotate(currentRotation);
        redrawPathsOnRotationOrScale(currentRotation, projection.scale());
        return animationRequest = requestAnimationFrame(rotate);
      }
    };

    redrawPathsOnRotationOrScale = function(rotation, scale) {
      currentRotation = rotation;
      projection.rotate(currentRotation).scale(scale);
      if (!groupPathsSelection["path"]) {
        groupPathsSelection["path"] = groupPaths.selectAll("path");
      }
      return groupPathsSelection["path"].attr("d", path);
    };

    return Globe;

  })();

  window.Globe = Globe;

}).call(this);
